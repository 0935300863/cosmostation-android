// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: coin/codec.proto

package coin;

public final class Codec {
  private Codec() {}
  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistryLite registry) {
  }

  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistry registry) {
    registerAllExtensions(
        (com.google.protobuf.ExtensionRegistryLite) registry);
  }
  public interface CoinOrBuilder extends
      // @@protoc_insertion_point(interface_extends:coin.Coin)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <pre>
     * Whole coins, -10^15 &lt; integer &lt; 10^15
     * </pre>
     *
     * <code>int64 whole = 1;</code>
     */
    long getWhole();

    /**
     * <pre>
     * Billionth of coins. 0 &lt;= abs(fractional) &lt; 10^9
     * If fractional != 0, must have same sign as integer
     * </pre>
     *
     * <code>int64 fractional = 2;</code>
     */
    long getFractional();

    /**
     * <pre>
     * Ticker is 3-4 upper-case letters and
     * all Coins of the same currency can be combined
     * </pre>
     *
     * <code>string ticker = 3;</code>
     */
    java.lang.String getTicker();
    /**
     * <pre>
     * Ticker is 3-4 upper-case letters and
     * all Coins of the same currency can be combined
     * </pre>
     *
     * <code>string ticker = 3;</code>
     */
    com.google.protobuf.ByteString
        getTickerBytes();
  }
  /**
   * <pre>
   * Coin can hold any amount between -1 billion and +1 billion
   * at steps of 10^-9. It is a fixed-point decimal
   * representation and uses integers to avoid rounding
   * associated with floats.
   * Every code has a denomination, which is just a
   * If you want anything more complex, you should write your
   * own type, possibly borrowing from this code.
   * </pre>
   *
   * Protobuf type {@code coin.Coin}
   */
  public  static final class Coin extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:coin.Coin)
      CoinOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use Coin.newBuilder() to construct.
    private Coin(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private Coin() {
      ticker_ = "";
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    private Coin(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            case 8: {

              whole_ = input.readInt64();
              break;
            }
            case 16: {

              fractional_ = input.readInt64();
              break;
            }
            case 26: {
              java.lang.String s = input.readStringRequireUtf8();

              ticker_ = s;
              break;
            }
            default: {
              if (!parseUnknownField(
                  input, unknownFields, extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return coin.Codec.internal_static_coin_Coin_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return coin.Codec.internal_static_coin_Coin_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              coin.Codec.Coin.class, coin.Codec.Coin.Builder.class);
    }

    public static final int WHOLE_FIELD_NUMBER = 1;
    private long whole_;
    /**
     * <pre>
     * Whole coins, -10^15 &lt; integer &lt; 10^15
     * </pre>
     *
     * <code>int64 whole = 1;</code>
     */
    public long getWhole() {
      return whole_;
    }

    public static final int FRACTIONAL_FIELD_NUMBER = 2;
    private long fractional_;
    /**
     * <pre>
     * Billionth of coins. 0 &lt;= abs(fractional) &lt; 10^9
     * If fractional != 0, must have same sign as integer
     * </pre>
     *
     * <code>int64 fractional = 2;</code>
     */
    public long getFractional() {
      return fractional_;
    }

    public static final int TICKER_FIELD_NUMBER = 3;
    private volatile java.lang.Object ticker_;
    /**
     * <pre>
     * Ticker is 3-4 upper-case letters and
     * all Coins of the same currency can be combined
     * </pre>
     *
     * <code>string ticker = 3;</code>
     */
    public java.lang.String getTicker() {
      java.lang.Object ref = ticker_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        ticker_ = s;
        return s;
      }
    }
    /**
     * <pre>
     * Ticker is 3-4 upper-case letters and
     * all Coins of the same currency can be combined
     * </pre>
     *
     * <code>string ticker = 3;</code>
     */
    public com.google.protobuf.ByteString
        getTickerBytes() {
      java.lang.Object ref = ticker_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        ticker_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (whole_ != 0L) {
        output.writeInt64(1, whole_);
      }
      if (fractional_ != 0L) {
        output.writeInt64(2, fractional_);
      }
      if (!getTickerBytes().isEmpty()) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 3, ticker_);
      }
      unknownFields.writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (whole_ != 0L) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt64Size(1, whole_);
      }
      if (fractional_ != 0L) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt64Size(2, fractional_);
      }
      if (!getTickerBytes().isEmpty()) {
        size += com.google.protobuf.GeneratedMessageV3.computeStringSize(3, ticker_);
      }
      size += unknownFields.getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof coin.Codec.Coin)) {
        return super.equals(obj);
      }
      coin.Codec.Coin other = (coin.Codec.Coin) obj;

      if (getWhole()
          != other.getWhole()) return false;
      if (getFractional()
          != other.getFractional()) return false;
      if (!getTicker()
          .equals(other.getTicker())) return false;
      if (!unknownFields.equals(other.unknownFields)) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      hash = (37 * hash) + WHOLE_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
          getWhole());
      hash = (37 * hash) + FRACTIONAL_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
          getFractional());
      hash = (37 * hash) + TICKER_FIELD_NUMBER;
      hash = (53 * hash) + getTicker().hashCode();
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static coin.Codec.Coin parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static coin.Codec.Coin parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static coin.Codec.Coin parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static coin.Codec.Coin parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static coin.Codec.Coin parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static coin.Codec.Coin parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static coin.Codec.Coin parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static coin.Codec.Coin parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static coin.Codec.Coin parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static coin.Codec.Coin parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static coin.Codec.Coin parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static coin.Codec.Coin parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(coin.Codec.Coin prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * <pre>
     * Coin can hold any amount between -1 billion and +1 billion
     * at steps of 10^-9. It is a fixed-point decimal
     * representation and uses integers to avoid rounding
     * associated with floats.
     * Every code has a denomination, which is just a
     * If you want anything more complex, you should write your
     * own type, possibly borrowing from this code.
     * </pre>
     *
     * Protobuf type {@code coin.Coin}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:coin.Coin)
        coin.Codec.CoinOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return coin.Codec.internal_static_coin_Coin_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return coin.Codec.internal_static_coin_Coin_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                coin.Codec.Coin.class, coin.Codec.Coin.Builder.class);
      }

      // Construct using coin.Codec.Coin.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
        }
      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        whole_ = 0L;

        fractional_ = 0L;

        ticker_ = "";

        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return coin.Codec.internal_static_coin_Coin_descriptor;
      }

      @java.lang.Override
      public coin.Codec.Coin getDefaultInstanceForType() {
        return coin.Codec.Coin.getDefaultInstance();
      }

      @java.lang.Override
      public coin.Codec.Coin build() {
        coin.Codec.Coin result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public coin.Codec.Coin buildPartial() {
        coin.Codec.Coin result = new coin.Codec.Coin(this);
        result.whole_ = whole_;
        result.fractional_ = fractional_;
        result.ticker_ = ticker_;
        onBuilt();
        return result;
      }

      @java.lang.Override
      public Builder clone() {
        return super.clone();
      }
      @java.lang.Override
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.setField(field, value);
      }
      @java.lang.Override
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return super.clearField(field);
      }
      @java.lang.Override
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return super.clearOneof(oneof);
      }
      @java.lang.Override
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return super.setRepeatedField(field, index, value);
      }
      @java.lang.Override
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.addRepeatedField(field, value);
      }
      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof coin.Codec.Coin) {
          return mergeFrom((coin.Codec.Coin)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(coin.Codec.Coin other) {
        if (other == coin.Codec.Coin.getDefaultInstance()) return this;
        if (other.getWhole() != 0L) {
          setWhole(other.getWhole());
        }
        if (other.getFractional() != 0L) {
          setFractional(other.getFractional());
        }
        if (!other.getTicker().isEmpty()) {
          ticker_ = other.ticker_;
          onChanged();
        }
        this.mergeUnknownFields(other.unknownFields);
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        coin.Codec.Coin parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (coin.Codec.Coin) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }

      private long whole_ ;
      /**
       * <pre>
       * Whole coins, -10^15 &lt; integer &lt; 10^15
       * </pre>
       *
       * <code>int64 whole = 1;</code>
       */
      public long getWhole() {
        return whole_;
      }
      /**
       * <pre>
       * Whole coins, -10^15 &lt; integer &lt; 10^15
       * </pre>
       *
       * <code>int64 whole = 1;</code>
       */
      public Builder setWhole(long value) {
        
        whole_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Whole coins, -10^15 &lt; integer &lt; 10^15
       * </pre>
       *
       * <code>int64 whole = 1;</code>
       */
      public Builder clearWhole() {
        
        whole_ = 0L;
        onChanged();
        return this;
      }

      private long fractional_ ;
      /**
       * <pre>
       * Billionth of coins. 0 &lt;= abs(fractional) &lt; 10^9
       * If fractional != 0, must have same sign as integer
       * </pre>
       *
       * <code>int64 fractional = 2;</code>
       */
      public long getFractional() {
        return fractional_;
      }
      /**
       * <pre>
       * Billionth of coins. 0 &lt;= abs(fractional) &lt; 10^9
       * If fractional != 0, must have same sign as integer
       * </pre>
       *
       * <code>int64 fractional = 2;</code>
       */
      public Builder setFractional(long value) {
        
        fractional_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Billionth of coins. 0 &lt;= abs(fractional) &lt; 10^9
       * If fractional != 0, must have same sign as integer
       * </pre>
       *
       * <code>int64 fractional = 2;</code>
       */
      public Builder clearFractional() {
        
        fractional_ = 0L;
        onChanged();
        return this;
      }

      private java.lang.Object ticker_ = "";
      /**
       * <pre>
       * Ticker is 3-4 upper-case letters and
       * all Coins of the same currency can be combined
       * </pre>
       *
       * <code>string ticker = 3;</code>
       */
      public java.lang.String getTicker() {
        java.lang.Object ref = ticker_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          ticker_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <pre>
       * Ticker is 3-4 upper-case letters and
       * all Coins of the same currency can be combined
       * </pre>
       *
       * <code>string ticker = 3;</code>
       */
      public com.google.protobuf.ByteString
          getTickerBytes() {
        java.lang.Object ref = ticker_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          ticker_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <pre>
       * Ticker is 3-4 upper-case letters and
       * all Coins of the same currency can be combined
       * </pre>
       *
       * <code>string ticker = 3;</code>
       */
      public Builder setTicker(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  
        ticker_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Ticker is 3-4 upper-case letters and
       * all Coins of the same currency can be combined
       * </pre>
       *
       * <code>string ticker = 3;</code>
       */
      public Builder clearTicker() {
        
        ticker_ = getDefaultInstance().getTicker();
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Ticker is 3-4 upper-case letters and
       * all Coins of the same currency can be combined
       * </pre>
       *
       * <code>string ticker = 3;</code>
       */
      public Builder setTickerBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
        
        ticker_ = value;
        onChanged();
        return this;
      }
      @java.lang.Override
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      @java.lang.Override
      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:coin.Coin)
    }

    // @@protoc_insertion_point(class_scope:coin.Coin)
    private static final coin.Codec.Coin DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new coin.Codec.Coin();
    }

    public static coin.Codec.Coin getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<Coin>
        PARSER = new com.google.protobuf.AbstractParser<Coin>() {
      @java.lang.Override
      public Coin parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new Coin(input, extensionRegistry);
      }
    };

    public static com.google.protobuf.Parser<Coin> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<Coin> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public coin.Codec.Coin getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_coin_Coin_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_coin_Coin_fieldAccessorTable;

  public static com.google.protobuf.Descriptors.FileDescriptor
      getDescriptor() {
    return descriptor;
  }
  private static  com.google.protobuf.Descriptors.FileDescriptor
      descriptor;
  static {
    java.lang.String[] descriptorData = {
      "\n\020coin/codec.proto\022\004coin\"9\n\004Coin\022\r\n\005whol" +
      "e\030\001 \001(\003\022\022\n\nfractional\030\002 \001(\003\022\016\n\006ticker\030\003 " +
      "\001(\tb\006proto3"
    };
    com.google.protobuf.Descriptors.FileDescriptor.InternalDescriptorAssigner assigner =
        new com.google.protobuf.Descriptors.FileDescriptor.    InternalDescriptorAssigner() {
          public com.google.protobuf.ExtensionRegistry assignDescriptors(
              com.google.protobuf.Descriptors.FileDescriptor root) {
            descriptor = root;
            return null;
          }
        };
    com.google.protobuf.Descriptors.FileDescriptor
      .internalBuildGeneratedFileFrom(descriptorData,
        new com.google.protobuf.Descriptors.FileDescriptor[] {
        }, assigner);
    internal_static_coin_Coin_descriptor =
      getDescriptor().getMessageTypes().get(0);
    internal_static_coin_Coin_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_coin_Coin_descriptor,
        new java.lang.String[] { "Whole", "Fractional", "Ticker", });
  }

  // @@protoc_insertion_point(outer_class_scope)
}
